/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate, NetworkFirst } from "workbox-strategies";
import { tasks as tasksLocalService } from "./local/tasks.js";
import { syncTasks as syncServer } from "./server/syncTasks.js";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
const pluginCallbacks = {
  handlerDidError: async () => {
    return new Response('{"tasks":[]}', {
      headers: { "Content-Type": "application/json" },
    });
  },
  cachedResponseWillBeUsed: async ({ cachedResponse }) => {
    console.log("The response comes from the cache");
    return cachedResponse;
  },
  fetchDidSucceed: async ({ response }) => {
    console.log("The response comes from the network");
    return response;
  },
  cacheDidUpdate: async () => {
    console.log("cache was updated");
  },
};

registerRoute(
  ({ url }) => url.pathname.indexOf("/tasks") !== -1,
  new NetworkFirst({
    cacheName: "latest-tasks",
    networkTimeoutSeconds: 1,
    plugins: [pluginCallbacks],
  })
);

// Any other custom service worker logic can go here.
self.addEventListener("sync", (event) => {
  event.waitUntil(doSync(event));
});

async function doSync(event) {
  console.log("it was executed...", event);
  if (event.tag === "sync-queued-data") {
    let all = await tasksLocalService.getAllQueued();
    return syncServer.bulkTasks(all).then(() => {
      return tasksLocalService.deleteAllQueued();
    });
  }
}

/*
async function fetchWithTimeout(resource) {
  const timeout = 1000;

  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  const response = await fetch(resource, {
    signal: controller.signal,
  });
  clearTimeout(id);
  return response;
}

self.addEventListener("fetch", (e) => {
  if (e.request.method === "GET" && e.request.url.indexOf("/tasks") !== -1) {
    //network first strategy...
    e.respondWith(
      fetchWithTimeout(e.request)
        .then((fetchResponse) => {
          return caches.open("latest-tasks").then((cache) => {
            cache.put(e.request, fetchResponse.clone());
            return fetchResponse;
          });
        })
        //this is execute if offline
        .catch(() => {
          return caches.match(e.request).then((response) => {
            if (response) {
              return response;
            }
            return new Response('{"tasks":[]}', {
              headers: { "Content-Type": "application/json" },
            });
          });
        })
    );
  }
});
*/
